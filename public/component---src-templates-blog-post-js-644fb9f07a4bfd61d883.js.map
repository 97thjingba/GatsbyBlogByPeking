{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","reactbulma__WEBPACK_IMPORTED_MODULE_2__","_ref","post","data","markdownRemark","a","createElement","className","frontmatter","title","dangerouslySetInnerHTML","__html","html","m","module","exports","require","default","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","Fragment","props","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","options","sectionClassName","anchors","scrollBar","arrowNavigation","navigation","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_4__","lang","site","siteMetadata","name","content","description","react_fullpage_lgy__WEBPACK_IMPORTED_MODULE_6__","id","_public_static_d_1126727397_json__WEBPACK_IMPORTED_MODULE_0__","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","shape","pathname"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAA,EAAA,KAMeE,EAAA,iBAAAQ,GAAc,IACnBC,EADmBD,EAAXE,KACIC,eAClB,OACIP,EAAAQ,EAAAC,cAACP,EAAA,EAAD,KACIF,EAAAQ,EAAAC,cAACN,EAAA,QAAD,CAASO,UAAU,wBACfV,EAAAQ,EAAAC,cAAA,MAAIC,UAAU,gBAAgBL,EAAKM,YAAYC,OAC/CZ,EAAAQ,EAAAC,cAAA,OAAKC,UAAU,yCACXV,EAAAQ,EAAAC,cAAA,OAAKC,UAAU,aACXV,EAAAQ,EAAAC,cAAA,OAAKI,wBAAyB,CAAEC,OAAQT,EAAKU,aAQ9D,IAAMjB,EAAK,iCCtBlB,IAAsBkB,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/CtB,EAAAG,EAAAD,EAAA,sBAAAyB,IAAA,IAAAtB,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAuB,EAAA5B,EAAA,GAAA6B,EAAA7B,EAAAO,EAAAqB,GAAAE,EAAA9B,EAAA,IAAA+B,EAAA/B,EAAAO,EAAAuB,GAAA9B,EAAAG,EAAAD,EAAA,sBAAA6B,EAAAjB,IAAAd,EAAA,SAaMgC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAATzB,GAA2E,IAAxC0B,EAAwC1B,EAAxC0B,gBAAiBxB,EAAuBF,EAAvBE,KAAMR,EAAiBM,EAAjBN,MAAOiC,EAAU3B,EAAV2B,OACzDC,EAAY1B,EACdA,EAAKA,KACLwB,EAAgBhC,IAAUgC,EAAgBhC,GAAOQ,KAErD,OACEN,EAAAQ,EAAAC,cAACT,EAAAQ,EAAMyB,SAAP,KACGD,GAAaD,EAAOC,IACnBA,GAAahC,EAAAQ,EAAAC,cAAA,qCAKrB,IAAMY,EAAc,SAAAa,GAAS,IACnB5B,EAAkC4B,EAAlC5B,KAAMR,EAA4BoC,EAA5BpC,MAAOiC,EAAqBG,EAArBH,OAAQI,EAAaD,EAAbC,SAE7B,OACEnC,EAAAQ,EAAAC,cAACiB,EAAmBU,SAApB,KACG,SAAAN,GAAe,OACd9B,EAAAQ,EAAAC,cAACoB,EAAD,CACEvB,KAAMA,EACNR,MAAOA,EACPiC,OAAQA,GAAUI,EAClBL,gBAAiBA,OA6B3BT,EAAYgB,UAAY,CACtB/B,KAAMgC,IAAUC,OAChBzC,MAAOwC,IAAUE,OAAOC,WACxBV,OAAQO,IAAUI,KAClBP,SAAUG,IAAUI,kHChElBC,EAAU,CACVC,iBAAkB,UAClBC,QAAS,CAAC,OACVC,WAAW,EACXC,iBAAgB,EAChBC,YAAW,GAIApD,EAAA,WAAAQ,GAAA,IAAG+B,EAAH/B,EAAG+B,SAAH,OACXc,EAAAzC,EAAAC,cAACyC,EAAA,EAAD,CACIpD,MAAK,aAYLiC,OAAQ,SAAAzB,GAAI,OACR2C,EAAAzC,EAAAC,cAAA,YACIwC,EAAAzC,EAAAC,cAAC0C,EAAA,OAAD,KACIF,EAAAzC,EAAAC,cAAA,QAAM2C,KAAK,OACXH,EAAAzC,EAAAC,cAAA,aAAQH,EAAK+C,KAAKC,aAAa1C,OAC/BqC,EAAAzC,EAAAC,cAAA,QAAM8C,KAAK,cAAcC,QAASlD,EAAK+C,KAAKC,aAAaG,eAEzDR,EAAAzC,EAAAC,cAAA,WACIwC,EAAAzC,EAAAC,cAACiD,EAAA,kBAAsBf,EACnBM,EAAAzC,EAAAC,cAACiD,EAAA,QAAD,CAASC,GAAG,SACRV,EAAAzC,EAAAC,cAAA,OAAKC,UAAU,UACXuC,EAAAzC,EAAAC,cAAA,MAAIC,UAAU,uCAAd,6BAIXyB,KA5BrB7B,KAAAsD,oMCZEC,EAAmB,SAAAzD,GAAiC,IAA9B0D,EAA8B1D,EAA9B0D,SAAUC,EAAoB3D,EAApB2D,cACpC,OAAKA,EAGEpC,IAAMlB,cAAcuD,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV,MASXN,EAAiBxB,UAAY,CAC3ByB,SAAUxB,IAAU8B,MAAM,CACxBC,SAAU/B,IAAUE,OAAOC,aAC1BA,YAGUoB","file":"component---src-templates-blog-post-js-644fb9f07a4bfd61d883.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport { Section } from 'reactbulma'\nimport './blog-post.css'\n\nexport default ({ data }) => {\n    const post = data.markdownRemark\n    return (\n        <Layout>\n            <Section className=\"has-background-light\">\n                <h1 className=\"title center\">{post.frontmatter.title}</h1>\n                <div className=\"container has-background-white border\">\n                    <div className=\"hero-body\">\n                        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                    </div>\n                </div>\n            </Section>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport './layout.css'\nimport { Helmet } from 'react-helmet'\nimport { Container } from \"reactbulma\";\nimport { SectionsContainer, Section} from 'react-fullpage-lgy';\n\nlet options = {\n    sectionClassName: 'section',\n    anchors: ['one'],\n    scrollBar: false,\n    arrowNavigation:true,\n    navigation:false,\n};\n\n\nexport default ({ children }) => (\n    <StaticQuery\n        query={graphql`\n            query {\n                site {\n                siteMetadata {\n                    title,\n                    description,\n                }\n                }\n            }\n            `\n        }\n\n        render={data => (\n            <body>\n                <Helmet>\n                    <html lang=\"en\" />\n                    <title>{data.site.siteMetadata.title}</title>\n                    <meta name=\"description\" content={data.site.siteMetadata.description} />\n                </Helmet>\n                    <div>    \n                        <SectionsContainer {...options}>    \n                            <Section id=\"slide\">\n                                <div className=\"center\">\n                                    <h1 className=\"has-text-white title title_position\">LGY'S blog - by GATSBY</h1>\n                                </div>\n                            </Section>\n                        </SectionsContainer>\n                        {children} \n                    </div>  \n            </body>\n        )}\n    />\n)","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}