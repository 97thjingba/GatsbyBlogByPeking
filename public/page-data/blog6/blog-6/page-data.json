{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog6/blog-6/","webpackCompilationHash":"d011f23c0606783f16eb","result":{"data":{"markdownRemark":{"html":"<h1>不常见的错误</h1>\n<hr>\n<p>我想将Drawer代码抽象为一个Drawer组件的时候，遇见了以下的这个问题.</p>\n<pre><code>Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\n</code></pre>\n<p>下面我将举例解决这个问题</p>\n<pre><code>import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass Item extends React.Component {\n    constructor(props) {\n        super(props);     \n        this.toggle= this.toggle.bind(this);\n        this.state = {\n            details: false\n        } \n    }  \n    toggle(){\n        const currentState = this.state.details;\n        this.setState({ details: !currentState }); \n    }\n\n    render() {\n        return (\n            &#x3C;tr className=\"Item\"> \n                &#x3C;td>{this.props.config.server}&#x3C;/td>      \n                &#x3C;td>{this.props.config.verbose}&#x3C;/td> \n                &#x3C;td>{this.props.config.type}&#x3C;/td>\n                &#x3C;td className={this.state.details ? \"visible\" : \"hidden\"}>PLACEHOLDER MORE INFO&#x3C;/td>\n                {&#x3C;td>&#x3C;span onClick={this.toggle()}>Details&#x3C;/span>&#x3C;/td>}\n            &#x3C;/tr>\n    )}\n}\n\nexport default Item;\n</code></pre>\n<p>这里是react 陷入了死循环的问题.(在比较低的版本中不会出现这样的问题可能)</p>\n<p>在Onclick里直接填入this.toggle()并不是一个函数，而是函数的执行。所以到了这一行会直接执行这个函数。但是函数里面调用了SetState这个方法，状态改变以后会重新渲染Dom，也就是再次调用render方法。所以一直这样下去就陷入了死循环里</p>\n<h1>解决方法</h1>\n<p>将<strong><em>函数的执行变成函数的调用</em></strong></p>\n<pre><code>onClick={this.toggle()}\n</code></pre>\n<p>变成</p>\n<pre><code>onClick={()=>{this.toggle()}}\n</code></pre>","frontmatter":{"title":"加入Drawer组件","image":{"publicURL":"/static/img-six-02be760e042a43522169c8ee5923830c.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog6/blog-6/"}}}